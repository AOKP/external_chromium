# This file is generated; do not edit.

import os

Import("env")

env = env.Clone(COMPONENT_NAME='gtest',
                TARGET_NAME='gtest')

configurations = {
    'Release' : {
        'Append' : dict(
            CCFLAGS = [
                '-pthread',
                '-fno-exceptions',
                '-D_FILE_OFFSET_BITS=64',
                '-fvisibility=hidden',
                '-fno-strict-aliasing',
                '-O2',
                '-fno-ident',
                '-fdata-sections',
                '-ffunction-sections',
                '-fno-asynchronous-unwind-tables'
            ],
            CPPDEFINES = [
                'CHROMIUM_BUILD',
                'ENABLE_GPU=1',
                'GTEST_HAS_RTTI=0',
                'NDEBUG',
                'NVALGRIND'
            ],
            CPPPATH = [
                env.Dir('$SRC_DIR/testing/gtest'),
                env.Dir('$SRC_DIR/testing/gtest/include')
            ],
            CXXFLAGS = [
                '-fno-rtti',
                '-fno-threadsafe-statics',
                '-fvisibility-inlines-hidden'
            ],
            LINKFLAGS = [
                '-pthread',
                '-Wl,--gc-sections'
            ],
        ),
        'FilterOut' : dict(
        ),
        'Replace' : dict(
             FLOCK_LDMODULE = ['flock', '$TOP_BUILDDIR/linker.lock', '$LDMODULE'],
             FLOCK_LINK = ['flock', '$TOP_BUILDDIR/linker.lock', '$LINK'],
             FLOCK_SHLINK = ['flock', '$TOP_BUILDDIR/linker.lock', '$SHLINK'],
             IMPLICIT_COMMAND_DEPENDENCIES = '0',
             LDMODULECOM = [['$FLOCK_LDMODULE',
  '-o',
  '$TARGET',
  '$_LIBDIRFLAGS',
  '$LDMODULEFLAGS',
  '$SOURCES',
  '-Wl,--start-group',
  '$_LIBFLAGS',
  '-Wl,--end-group']],
             LIBPATH = ['$LIB_DIR'],
             LINKCOM = [['$FLOCK_LINK',
  '-o',
  '$TARGET',
  '$_LIBDIRFLAGS',
  '$LINKFLAGS',
  '$SOURCES',
  '-Wl,--start-group',
  '$_LIBFLAGS',
  '-Wl,--end-group']],
             SHLINKCOM = [['$FLOCK_SHLINK',
  '-o',
  '$TARGET',
  '$_LIBDIRFLAGS',
  '$SHLINKFLAGS',
  '$SOURCES',
  '-Wl,--start-group',
  '$_LIBFLAGS',
  '-Wl,--end-group']],
        ),
        'ImportExternal' : [
             'AS',
             'CC',
             'CXX',
             'LINK',
        ],
        'PropagateExternal' : [
             'AS',
             'CC',
             'CCACHE_DIR',
             'CXX',
             'DISTCC_DIR',
             'DISTCC_HOSTS',
             'HOME',
             'INCLUDE_SERVER_ARGS',
             'INCLUDE_SERVER_PORT',
             'LINK',
             'CHROME_BUILD_TYPE',
             'CHROMIUM_BUILD',
             'OFFICIAL_BUILD',
        ],
    },
    'Debug' : {
        'Append' : dict(
            CCFLAGS = [
                '-pthread',
                '-fno-exceptions',
                '-D_FILE_OFFSET_BITS=64',
                '-fvisibility=hidden',
                '-fno-strict-aliasing',
                '-O0',
                '-g'
            ],
            CPPDEFINES = [
                'CHROMIUM_BUILD',
                'ENABLE_GPU=1',
                'GTEST_HAS_RTTI=0',
                '_DEBUG'
            ],
            CPPPATH = [
                env.Dir('$SRC_DIR/testing/gtest'),
                env.Dir('$SRC_DIR/testing/gtest/include')
            ],
            CXXFLAGS = [
                '-fno-rtti',
                '-fno-threadsafe-statics',
                '-fvisibility-inlines-hidden'
            ],
            LINKFLAGS = [
                '-pthread',
                '-rdynamic'
            ],
        ),
        'FilterOut' : dict(
        ),
        'Replace' : dict(
             FLOCK_LDMODULE = ['flock', '$TOP_BUILDDIR/linker.lock', '$LDMODULE'],
             FLOCK_LINK = ['flock', '$TOP_BUILDDIR/linker.lock', '$LINK'],
             FLOCK_SHLINK = ['flock', '$TOP_BUILDDIR/linker.lock', '$SHLINK'],
             IMPLICIT_COMMAND_DEPENDENCIES = '0',
             LDMODULECOM = [['$FLOCK_LDMODULE',
  '-o',
  '$TARGET',
  '$_LIBDIRFLAGS',
  '$LDMODULEFLAGS',
  '$SOURCES',
  '-Wl,--start-group',
  '$_LIBFLAGS',
  '-Wl,--end-group']],
             LIBPATH = ['$LIB_DIR'],
             LINKCOM = [['$FLOCK_LINK',
  '-o',
  '$TARGET',
  '$_LIBDIRFLAGS',
  '$LINKFLAGS',
  '$SOURCES',
  '-Wl,--start-group',
  '$_LIBFLAGS',
  '-Wl,--end-group']],
             SHLINKCOM = [['$FLOCK_SHLINK',
  '-o',
  '$TARGET',
  '$_LIBDIRFLAGS',
  '$SHLINKFLAGS',
  '$SOURCES',
  '-Wl,--start-group',
  '$_LIBFLAGS',
  '-Wl,--end-group']],
        ),
        'ImportExternal' : [
             'AS',
             'CC',
             'CXX',
             'LINK',
        ],
        'PropagateExternal' : [
             'AS',
             'CC',
             'CCACHE_DIR',
             'CXX',
             'DISTCC_DIR',
             'DISTCC_HOSTS',
             'HOME',
             'INCLUDE_SERVER_ARGS',
             'INCLUDE_SERVER_PORT',
             'LINK',
             'CHROME_BUILD_TYPE',
             'CHROMIUM_BUILD',
             'OFFICIAL_BUILD',
        ],
    },
}

config = configurations[env['CONFIG_NAME']]
env.Append(**config['Append'])
env.FilterOut(**config['FilterOut'])
env.Replace(**config['Replace'])

# Scons forces -fPIC for SHCCFLAGS on some platforms.
# Disable that so we can control it from cflags in gyp.
# Note that Scons itself is inconsistent with its -fPIC
# setting. SHCCFLAGS forces -fPIC, and SHCFLAGS does not.
# This will make SHCCFLAGS consistent with SHCFLAGS.
env['SHCCFLAGS'] = ['$CCFLAGS']

for _var in config['ImportExternal']:
  if _var in ARGUMENTS:
    env[_var] = ARGUMENTS[_var]
  elif _var in os.environ:
    env[_var] = os.environ[_var]
for _var in config['PropagateExternal']:
  if _var in ARGUMENTS:
    env[_var] = ARGUMENTS[_var]
  elif _var in os.environ:
    env['ENV'][_var] = os.environ[_var]

env['ENV']['LD_LIBRARY_PATH'] = env.subst('$LIB_DIR')

if ARGUMENTS.get('COVERAGE') not in (None, '0'):
  env.AppendUnique(
            CCFLAGS = [
                '-fprofile-arcs',
                '-ftest-coverage'
            ],
            LINKFLAGS = [
                '-fprofile-arcs'
            ],
  )

if ARGUMENTS.get('PROFILE') not in (None, '0'):
  env.AppendUnique(
            CCFLAGS = [
                '-pg',
                '-g'
            ],
            LINKFLAGS = [
                '-pg'
            ],
  )

if ARGUMENTS.get('SYMBOLS') not in (None, '0'):
  env.AppendUnique(
            CCFLAGS = [
                '-g'
            ],
  )

input_files = [
    'gtest/include/gtest/gtest-death-test.h',
    'gtest/include/gtest/gtest-message.h',
    'gtest/include/gtest/gtest-param-test.h',
    'gtest/include/gtest/gtest-spi.h',
    'gtest/include/gtest/gtest-test-part.h',
    'gtest/include/gtest/gtest-typed-test.h',
    'gtest/include/gtest/gtest.h',
    'gtest/include/gtest/gtest_pred_impl.h',
    'gtest/include/gtest/gtest_prod.h',
    'gtest/include/gtest/internal/gtest-death-test-internal.h',
    'gtest/include/gtest/internal/gtest-filepath.h',
    'gtest/include/gtest/internal/gtest-internal.h',
    'gtest/include/gtest/internal/gtest-linked_ptr.h',
    'gtest/include/gtest/internal/gtest-param-util-generated.h',
    'gtest/include/gtest/internal/gtest-param-util.h',
    'gtest/include/gtest/internal/gtest-port.h',
    'gtest/include/gtest/internal/gtest-string.h',
    'gtest/include/gtest/internal/gtest-tuple.h',
    'gtest/include/gtest/internal/gtest-type-util.h',
    'gtest/src/gtest-death-test.cc',
    'gtest/src/gtest-filepath.cc',
    'gtest/src/gtest-internal-inl.h',
    'gtest/src/gtest-port.cc',
    'gtest/src/gtest-test-part.cc',
    'gtest/src/gtest-typed-test.cc',
    'gtest/src/gtest.cc',
    'multiprocess_func_list.cc',
    'multiprocess_func_list.h',
    'platform_test.h',
]

target_files = []
prerequisites = []

_result = []
for infile in input_files:
  if env.compilable(infile):
    if (type(infile) == type('')
        and (infile.startswith('$SRC_DIR/testing/')
             or not os.path.isabs(env.subst(infile)))):
      # Force files below the build directory by replacing all '..'
      # elements in the path with '__':
      base, ext = os.path.splitext(os.path.normpath(infile))
      base = [d == '..' and '__' or d for d in base.split('/')]
      base = os.path.join(*base)
      object = '${OBJ_DIR}/${COMPONENT_NAME}/${TARGET_NAME}/' + base
      if not infile.startswith('$SRC_DIR/testing/'):
        infile = '$SRC_DIR/testing/' + infile
      infile = env.StaticObject(object, infile)[0]
    else:
      infile = env.StaticObject(infile)[0]
  _result.append(infile)
input_files = _result

_outputs = env.GypStaticLibrary(env.File('${LIB_DIR}/${LIBPREFIX}gtest${LIBSUFFIX}'), input_files)
target_files.extend(_outputs)

gyp_target = env.Alias('gtest', target_files)
env.Requires(gyp_target, prerequisites)
Return("gyp_target")

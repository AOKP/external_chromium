# This file is generated; do not edit.

import os

Import("env")

env = env.Clone(COMPONENT_NAME='all',
                TARGET_NAME='All')

configurations = {
    'Release' : {
        'Append' : dict(
            CCFLAGS = [
                '-pthread',
                '-fno-exceptions',
                '-D_FILE_OFFSET_BITS=64',
                '-fvisibility=hidden',
                '-fno-strict-aliasing',
                '-pthread',
                '-D_REENTRANT',
                '-I/usr/include/gtk-2.0',
                '-I/usr/lib/gtk-2.0/include',
                '-I/usr/include/atk-1.0',
                '-I/usr/include/cairo',
                '-I/usr/include/pango-1.0',
                '-I/usr/include/gio-unix-2.0/',
                '-I/usr/include/glib-2.0',
                '-I/usr/lib/glib-2.0/include',
                '-I/usr/include/pixman-1',
                '-I/usr/include/freetype2',
                '-I/usr/include/directfb',
                '-I/usr/include/libpng12',
                '-I/usr/include/libpng12',
                '-O2',
                '-fno-ident',
                '-fdata-sections',
                '-ffunction-sections',
                '-fno-asynchronous-unwind-tables'
            ],
            CPPDEFINES = [
                'CHROMIUM_BUILD',
                'ENABLE_GPU=1',
                'GLEW_STATIC',
                'GL_GLEXT_PROTOTYPES',
                'PERF_TEST',
                'GOOGLE_PROTOBUF_NO_RTTI',
                'CLD_WINDOWS',
                '__OMX_EXPORTS',
                'UNIT_TEST',
                'GTEST_HAS_RTTI=0',
                'USE_SYSTEM_LIBBZ2',
                'COMPILER_GCC',
                '__STDC_CONSTANT_MACROS',
                'U_STATIC_IMPLEMENTATION',
                'USE_SYSTEM_LIBJPEG',
                'USE_SYSTEM_LIBPNG',
                'LIBXML_STATIC',
                'LIBXSLT_STATIC',
                '_LZMA_IN_CB',
                'USE_SYSTEM_ZLIB',
                'ENABLE_3D_CANVAS=1',
                'ENABLE_CHANNEL_MESSAGING=1',
                'ENABLE_DATABASE=1',
                'ENABLE_DATAGRID=0',
                'ENABLE_OFFLINE_WEB_APPLICATIONS=1',
                'ENABLE_DASHBOARD_SUPPORT=0',
                'ENABLE_DOM_STORAGE=1',
                'ENABLE_INDEXED_DATABASE=1',
                'ENABLE_FILTERS=1',
                'ENABLE_GEOLOCATION=1',
                'ENABLE_JAVASCRIPT_DEBUGGER=0',
                'ENABLE_JSC_MULTIPLE_THREADS=0',
                'ENABLE_ICONDATABASE=0',
                'ENABLE_NOTIFICATIONS=1',
                'ENABLE_OPENTYPE_SANITIZER=1',
                'ENABLE_ORIENTATION_EVENTS=0',
                'ENABLE_XSLT=1',
                'ENABLE_XPATH=1',
                'ENABLE_SHARED_WORKERS=1',
                'ENABLE_SVG=1',
                'ENABLE_SVG_ANIMATION=1',
                'ENABLE_SVG_AS_IMAGE=1',
                'ENABLE_SVG_USE=1',
                'ENABLE_SVG_FOREIGN_OBJECT=1',
                'ENABLE_SVG_FONTS=1',
                'ENABLE_VIDEO=1',
                'ENABLE_WEB_SOCKETS=1',
                'ENABLE_WORKERS=1',
                'BUILDING_CHROMIUM__=1',
                'USE_SYSTEM_MALLOC=1',
                'WTF_USE_PTHREADS=1',
                'NDEBUG',
                'NVALGRIND'
            ],
            CPPPATH = [
                env.Dir('$SRC_DIR/build/../third_party/icu/public/common'),
                env.Dir('$SRC_DIR/build/../third_party/icu/public/i18n'),
                env.Dir('$SRC_DIR/build/..'),
                env.Dir('$SRC_DIR/build/../gpu/command_buffer/common'),
                env.Dir('$SRC_DIR/build/../third_party/glew/include'),
                env.Dir('${SHARED_INTERMEDIATE_DIR}/app/app_locale_settings'),
                env.Dir('${SHARED_INTERMEDIATE_DIR}/app/app_strings'),
                env.Dir('${SHARED_INTERMEDIATE_DIR}/app/app_resources'),
                env.Dir('${SHARED_INTERMEDIATE_DIR}/chrome'),
                env.Dir('$SRC_DIR/build/../third_party/protobuf2'),
                env.Dir('$SRC_DIR/build/../third_party/protobuf2/src/src'),
                env.Dir('$SRC_DIR/build/../third_party/openmax/il'),
                env.Dir('${SHARED_INTERMEDIATE_DIR}/net'),
                env.Dir('$SRC_DIR/build/../sdch/open-vcdiff/src'),
                env.Dir('$SRC_DIR/build/../skia/config'),
                env.Dir('$SRC_DIR/build/../third_party/skia/include/config'),
                env.Dir('$SRC_DIR/build/../third_party/skia/include/core'),
                env.Dir('$SRC_DIR/build/../third_party/skia/include/effects'),
                env.Dir('$SRC_DIR/build/../skia/ext'),
                env.Dir('$SRC_DIR/build/../third_party/harfbuzz/src'),
                env.Dir('$SRC_DIR/build/../third_party/harfbuzz/contrib'),
                env.Dir('$SRC_DIR/build/../testing/gmock/include'),
                env.Dir('$SRC_DIR/build/../testing/gtest/include'),
                env.Dir('$SRC_DIR/build/../third_party/ffmpeg/include'),
                env.Dir('${SHARED_INTERMEDIATE_DIR}/ffmpeg'),
                env.Dir('$SRC_DIR/build/../third_party/libxml/linux/include'),
                env.Dir('$SRC_DIR/build/../third_party/libxml/include'),
                env.Dir('$SRC_DIR/build/../third_party/libxslt'),
                env.Dir('$SRC_DIR/build/../third_party/lzma_sdk'),
                env.Dir('$SRC_DIR/build/../third_party/npapi'),
                env.Dir('$SRC_DIR/build/../third_party/npapi/bindings'),
                env.Dir('$SRC_DIR/build/../third_party/ots/include'),
                env.Dir('$SRC_DIR/build/../third_party/sqlite/preprocessed'),
                env.Dir('$SRC_DIR/build/../third_party/WebKit/WebCore'),
                env.Dir('$SRC_DIR/build/../third_party/WebKit/WebCore/accessibility'),
                env.Dir('$SRC_DIR/build/../third_party/WebKit/WebCore/accessibility/chromium'),
                env.Dir('$SRC_DIR/build/../third_party/WebKit/WebCore/bindings'),
                env.Dir('$SRC_DIR/build/../third_party/WebKit/WebCore/bindings/generic'),
                env.Dir('$SRC_DIR/build/../third_party/WebKit/WebCore/bindings/v8'),
                env.Dir('$SRC_DIR/build/../third_party/WebKit/WebCore/bindings/v8/custom'),
                env.Dir('$SRC_DIR/build/../third_party/WebKit/WebCore/bindings/v8/specialization'),
                env.Dir('$SRC_DIR/build/../third_party/WebKit/WebCore/bridge'),
                env.Dir('$SRC_DIR/build/../third_party/WebKit/WebCore/css'),
                env.Dir('$SRC_DIR/build/../third_party/WebKit/WebCore/dom'),
                env.Dir('$SRC_DIR/build/../third_party/WebKit/WebCore/dom/default'),
                env.Dir('$SRC_DIR/build/../third_party/WebKit/WebCore/editing'),
                env.Dir('$SRC_DIR/build/../third_party/WebKit/WebCore/history'),
                env.Dir('$SRC_DIR/build/../third_party/WebKit/WebCore/html'),
                env.Dir('$SRC_DIR/build/../third_party/WebKit/WebCore/html/canvas'),
                env.Dir('$SRC_DIR/build/../third_party/WebKit/WebCore/inspector'),
                env.Dir('$SRC_DIR/build/../third_party/WebKit/WebCore/loader'),
                env.Dir('$SRC_DIR/build/../third_party/WebKit/WebCore/loader/appcache'),
                env.Dir('$SRC_DIR/build/../third_party/WebKit/WebCore/loader/archive'),
                env.Dir('$SRC_DIR/build/../third_party/WebKit/WebCore/loader/icon'),
                env.Dir('$SRC_DIR/build/../third_party/WebKit/WebCore/notifications'),
                env.Dir('$SRC_DIR/build/../third_party/WebKit/WebCore/page'),
                env.Dir('$SRC_DIR/build/../third_party/WebKit/WebCore/page/animation'),
                env.Dir('$SRC_DIR/build/../third_party/WebKit/WebCore/page/chromium'),
                env.Dir('$SRC_DIR/build/../third_party/WebKit/WebCore/platform'),
                env.Dir('$SRC_DIR/build/../third_party/WebKit/WebCore/platform/animation'),
                env.Dir('$SRC_DIR/build/../third_party/WebKit/WebCore/platform/chromium'),
                env.Dir('$SRC_DIR/build/../third_party/WebKit/WebCore/platform/graphics'),
                env.Dir('$SRC_DIR/build/../third_party/WebKit/WebCore/platform/graphics/chromium'),
                env.Dir('$SRC_DIR/build/../third_party/WebKit/WebCore/platform/graphics/filters'),
                env.Dir('$SRC_DIR/build/../third_party/WebKit/WebCore/platform/graphics/opentype'),
                env.Dir('$SRC_DIR/build/../third_party/WebKit/WebCore/platform/graphics/skia'),
                env.Dir('$SRC_DIR/build/../third_party/WebKit/WebCore/platform/graphics/transforms'),
                env.Dir('$SRC_DIR/build/../third_party/WebKit/WebCore/platform/image-decoders'),
                env.Dir('$SRC_DIR/build/../third_party/WebKit/WebCore/platform/image-decoders/bmp'),
                env.Dir('$SRC_DIR/build/../third_party/WebKit/WebCore/platform/image-decoders/gif'),
                env.Dir('$SRC_DIR/build/../third_party/WebKit/WebCore/platform/image-decoders/ico'),
                env.Dir('$SRC_DIR/build/../third_party/WebKit/WebCore/platform/image-decoders/jpeg'),
                env.Dir('$SRC_DIR/build/../third_party/WebKit/WebCore/platform/image-decoders/png'),
                env.Dir('$SRC_DIR/build/../third_party/WebKit/WebCore/platform/image-decoders/skia'),
                env.Dir('$SRC_DIR/build/../third_party/WebKit/WebCore/platform/image-decoders/xbm'),
                env.Dir('$SRC_DIR/build/../third_party/WebKit/WebCore/platform/image-encoders/skia'),
                env.Dir('$SRC_DIR/build/../third_party/WebKit/WebCore/platform/mock'),
                env.Dir('$SRC_DIR/build/../third_party/WebKit/WebCore/platform/network'),
                env.Dir('$SRC_DIR/build/../third_party/WebKit/WebCore/platform/network/chromium'),
                env.Dir('$SRC_DIR/build/../third_party/WebKit/WebCore/platform/sql'),
                env.Dir('$SRC_DIR/build/../third_party/WebKit/WebCore/platform/text'),
                env.Dir('$SRC_DIR/build/../third_party/WebKit/WebCore/plugins'),
                env.Dir('$SRC_DIR/build/../third_party/WebKit/WebCore/plugins/chromium'),
                env.Dir('$SRC_DIR/build/../third_party/WebKit/WebCore/rendering'),
                env.Dir('$SRC_DIR/build/../third_party/WebKit/WebCore/rendering/style'),
                env.Dir('$SRC_DIR/build/../third_party/WebKit/WebCore/storage'),
                env.Dir('$SRC_DIR/build/../third_party/WebKit/WebCore/storage/chromium'),
                env.Dir('$SRC_DIR/build/../third_party/WebKit/WebCore/svg'),
                env.Dir('$SRC_DIR/build/../third_party/WebKit/WebCore/svg/animation'),
                env.Dir('$SRC_DIR/build/../third_party/WebKit/WebCore/svg/graphics'),
                env.Dir('$SRC_DIR/build/../third_party/WebKit/WebCore/svg/graphics/filters'),
                env.Dir('$SRC_DIR/build/../third_party/WebKit/WebCore/websockets'),
                env.Dir('$SRC_DIR/build/../third_party/WebKit/WebCore/workers'),
                env.Dir('$SRC_DIR/build/../third_party/WebKit/WebCore/xml'),
                env.Dir('${SHARED_INTERMEDIATE_DIR}/webkit'),
                env.Dir('${SHARED_INTERMEDIATE_DIR}/webkit/bindings'),
                env.Dir('$SRC_DIR/build/../third_party/WebKit/JavaScriptCore'),
                env.Dir('$SRC_DIR/build/../third_party/WebKit/JavaScriptCore/wtf'),
                env.Dir('${SHARED_INTERMEDIATE_DIR}/test_shell'),
                env.Dir('$SRC_DIR/build/../v8/include')
            ],
            CXXFLAGS = [
                '-fno-rtti',
                '-fno-threadsafe-statics',
                '-fvisibility-inlines-hidden'
            ],
            LINKFLAGS = [
                '-pthread',
                '-L$TOP_BUILDDIR',
                '-Wl,--gc-sections'
            ],
            LIBS = [
                '-lX11',
                'libapp_base',
                'libbase_i18n',
                'libtest_support_base',
                'libtest_support_perf',
                'libbase',
                'liblinux_versioninfo',
                'libsymbolize',
                'libxdg_mime',
                'libdebugger',
                'libplugin',
                'libutility',
                'libprofile_import',
                'libchrome_gpu',
                'libworker',
                'libsyncapi',
                'libnotifier',
                'libsync',
                'libbrowser',
                'libcommon',
                'librenderer',
                'libtest_support_common',
                'libtest_support_ui',
                'libtest_support_unit',
                'libcommon_constants',
                'libnacl',
                'libconvert_dict',
                'libipc',
                'libmedia',
                'libomx_wrapper',
                'libnet_base',
                'libnet',
                'libnet_test_support',
                'libprinting',
                'libsdch',
                'libskia',
                'libskia_opts',
                'libgmock',
                'libgmockmain',
                'libgtest',
                'libgtestmain',
                'libcld',
                'libffmpeg',
                'libffmpegsumo',
                'libicudata',
                'libicui18n',
                'libicuuc',
                'libxml2',
                'libxslt',
                'liblzma_sdk',
                'libmodp_b64',
                'libots',
                'libsqlite3',
                'libwebkit',
                'libzlib',
                'libpepper_test_plugin',
                'libtest_shell_common',
                'libappcache',
                'libdatabase',
                'libglue',
                'libgoogleurl',
                'libv8_snapshot',
                'libv8_nosnapshot',
                'libv8_base',
                'libgenperf_libs',
                'libbreakpad_client',
                'libcourgette_lib',
                'libsandbox',
                'libssl',
                'libevent'
            ],
        ),
        'FilterOut' : dict(
        ),
        'Replace' : dict(
             FLOCK_LDMODULE = ['flock', '$TOP_BUILDDIR/linker.lock', '$LDMODULE'],
             FLOCK_LINK = ['flock', '$TOP_BUILDDIR/linker.lock', '$LINK'],
             FLOCK_SHLINK = ['flock', '$TOP_BUILDDIR/linker.lock', '$SHLINK'],
             IMPLICIT_COMMAND_DEPENDENCIES = '0',
             LDMODULECOM = [['$FLOCK_LDMODULE',
  '-o',
  '$TARGET',
  '$_LIBDIRFLAGS',
  '$LDMODULEFLAGS',
  '$SOURCES',
  '-Wl,--start-group',
  '$_LIBFLAGS',
  '-Wl,--end-group']],
             LIBPATH = ['$LIB_DIR'],
             LINKCOM = [['$FLOCK_LINK',
  '-o',
  '$TARGET',
  '$_LIBDIRFLAGS',
  '$LINKFLAGS',
  '$SOURCES',
  '-Wl,--start-group',
  '$_LIBFLAGS',
  '-Wl,--end-group']],
             SHLINKCOM = [['$FLOCK_SHLINK',
  '-o',
  '$TARGET',
  '$_LIBDIRFLAGS',
  '$SHLINKFLAGS',
  '$SOURCES',
  '-Wl,--start-group',
  '$_LIBFLAGS',
  '-Wl,--end-group']],
        ),
        'ImportExternal' : [
             'AS',
             'CC',
             'CXX',
             'LINK',
        ],
        'PropagateExternal' : [
             'AS',
             'CC',
             'CCACHE_DIR',
             'CXX',
             'DISTCC_DIR',
             'DISTCC_HOSTS',
             'HOME',
             'INCLUDE_SERVER_ARGS',
             'INCLUDE_SERVER_PORT',
             'LINK',
             'CHROME_BUILD_TYPE',
             'CHROMIUM_BUILD',
             'OFFICIAL_BUILD',
        ],
    },
    'Debug' : {
        'Append' : dict(
            CCFLAGS = [
                '-pthread',
                '-fno-exceptions',
                '-D_FILE_OFFSET_BITS=64',
                '-fvisibility=hidden',
                '-fno-strict-aliasing',
                '-pthread',
                '-D_REENTRANT',
                '-I/usr/include/gtk-2.0',
                '-I/usr/lib/gtk-2.0/include',
                '-I/usr/include/atk-1.0',
                '-I/usr/include/cairo',
                '-I/usr/include/pango-1.0',
                '-I/usr/include/gio-unix-2.0/',
                '-I/usr/include/glib-2.0',
                '-I/usr/lib/glib-2.0/include',
                '-I/usr/include/pixman-1',
                '-I/usr/include/freetype2',
                '-I/usr/include/directfb',
                '-I/usr/include/libpng12',
                '-I/usr/include/libpng12',
                '-O0',
                '-g'
            ],
            CPPDEFINES = [
                'CHROMIUM_BUILD',
                'ENABLE_GPU=1',
                'GLEW_STATIC',
                'GL_GLEXT_PROTOTYPES',
                'PERF_TEST',
                'GOOGLE_PROTOBUF_NO_RTTI',
                'CLD_WINDOWS',
                '__OMX_EXPORTS',
                'UNIT_TEST',
                'GTEST_HAS_RTTI=0',
                'USE_SYSTEM_LIBBZ2',
                'COMPILER_GCC',
                '__STDC_CONSTANT_MACROS',
                'U_STATIC_IMPLEMENTATION',
                'USE_SYSTEM_LIBJPEG',
                'USE_SYSTEM_LIBPNG',
                'LIBXML_STATIC',
                'LIBXSLT_STATIC',
                '_LZMA_IN_CB',
                'USE_SYSTEM_ZLIB',
                'ENABLE_3D_CANVAS=1',
                'ENABLE_CHANNEL_MESSAGING=1',
                'ENABLE_DATABASE=1',
                'ENABLE_DATAGRID=0',
                'ENABLE_OFFLINE_WEB_APPLICATIONS=1',
                'ENABLE_DASHBOARD_SUPPORT=0',
                'ENABLE_DOM_STORAGE=1',
                'ENABLE_INDEXED_DATABASE=1',
                'ENABLE_FILTERS=1',
                'ENABLE_GEOLOCATION=1',
                'ENABLE_JAVASCRIPT_DEBUGGER=0',
                'ENABLE_JSC_MULTIPLE_THREADS=0',
                'ENABLE_ICONDATABASE=0',
                'ENABLE_NOTIFICATIONS=1',
                'ENABLE_OPENTYPE_SANITIZER=1',
                'ENABLE_ORIENTATION_EVENTS=0',
                'ENABLE_XSLT=1',
                'ENABLE_XPATH=1',
                'ENABLE_SHARED_WORKERS=1',
                'ENABLE_SVG=1',
                'ENABLE_SVG_ANIMATION=1',
                'ENABLE_SVG_AS_IMAGE=1',
                'ENABLE_SVG_USE=1',
                'ENABLE_SVG_FOREIGN_OBJECT=1',
                'ENABLE_SVG_FONTS=1',
                'ENABLE_VIDEO=1',
                'ENABLE_WEB_SOCKETS=1',
                'ENABLE_WORKERS=1',
                'BUILDING_CHROMIUM__=1',
                'USE_SYSTEM_MALLOC=1',
                'WTF_USE_PTHREADS=1',
                '_DEBUG'
            ],
            CPPPATH = [
                env.Dir('$SRC_DIR/build/../third_party/icu/public/common'),
                env.Dir('$SRC_DIR/build/../third_party/icu/public/i18n'),
                env.Dir('$SRC_DIR/build/..'),
                env.Dir('$SRC_DIR/build/../gpu/command_buffer/common'),
                env.Dir('$SRC_DIR/build/../third_party/glew/include'),
                env.Dir('${SHARED_INTERMEDIATE_DIR}/app/app_locale_settings'),
                env.Dir('${SHARED_INTERMEDIATE_DIR}/app/app_strings'),
                env.Dir('${SHARED_INTERMEDIATE_DIR}/app/app_resources'),
                env.Dir('${SHARED_INTERMEDIATE_DIR}/chrome'),
                env.Dir('$SRC_DIR/build/../third_party/protobuf2'),
                env.Dir('$SRC_DIR/build/../third_party/protobuf2/src/src'),
                env.Dir('$SRC_DIR/build/../third_party/openmax/il'),
                env.Dir('${SHARED_INTERMEDIATE_DIR}/net'),
                env.Dir('$SRC_DIR/build/../sdch/open-vcdiff/src'),
                env.Dir('$SRC_DIR/build/../skia/config'),
                env.Dir('$SRC_DIR/build/../third_party/skia/include/config'),
                env.Dir('$SRC_DIR/build/../third_party/skia/include/core'),
                env.Dir('$SRC_DIR/build/../third_party/skia/include/effects'),
                env.Dir('$SRC_DIR/build/../skia/ext'),
                env.Dir('$SRC_DIR/build/../third_party/harfbuzz/src'),
                env.Dir('$SRC_DIR/build/../third_party/harfbuzz/contrib'),
                env.Dir('$SRC_DIR/build/../testing/gmock/include'),
                env.Dir('$SRC_DIR/build/../testing/gtest/include'),
                env.Dir('$SRC_DIR/build/../third_party/ffmpeg/include'),
                env.Dir('${SHARED_INTERMEDIATE_DIR}/ffmpeg'),
                env.Dir('$SRC_DIR/build/../third_party/libxml/linux/include'),
                env.Dir('$SRC_DIR/build/../third_party/libxml/include'),
                env.Dir('$SRC_DIR/build/../third_party/libxslt'),
                env.Dir('$SRC_DIR/build/../third_party/lzma_sdk'),
                env.Dir('$SRC_DIR/build/../third_party/npapi'),
                env.Dir('$SRC_DIR/build/../third_party/npapi/bindings'),
                env.Dir('$SRC_DIR/build/../third_party/ots/include'),
                env.Dir('$SRC_DIR/build/../third_party/sqlite/preprocessed'),
                env.Dir('$SRC_DIR/build/../third_party/WebKit/WebCore'),
                env.Dir('$SRC_DIR/build/../third_party/WebKit/WebCore/accessibility'),
                env.Dir('$SRC_DIR/build/../third_party/WebKit/WebCore/accessibility/chromium'),
                env.Dir('$SRC_DIR/build/../third_party/WebKit/WebCore/bindings'),
                env.Dir('$SRC_DIR/build/../third_party/WebKit/WebCore/bindings/generic'),
                env.Dir('$SRC_DIR/build/../third_party/WebKit/WebCore/bindings/v8'),
                env.Dir('$SRC_DIR/build/../third_party/WebKit/WebCore/bindings/v8/custom'),
                env.Dir('$SRC_DIR/build/../third_party/WebKit/WebCore/bindings/v8/specialization'),
                env.Dir('$SRC_DIR/build/../third_party/WebKit/WebCore/bridge'),
                env.Dir('$SRC_DIR/build/../third_party/WebKit/WebCore/css'),
                env.Dir('$SRC_DIR/build/../third_party/WebKit/WebCore/dom'),
                env.Dir('$SRC_DIR/build/../third_party/WebKit/WebCore/dom/default'),
                env.Dir('$SRC_DIR/build/../third_party/WebKit/WebCore/editing'),
                env.Dir('$SRC_DIR/build/../third_party/WebKit/WebCore/history'),
                env.Dir('$SRC_DIR/build/../third_party/WebKit/WebCore/html'),
                env.Dir('$SRC_DIR/build/../third_party/WebKit/WebCore/html/canvas'),
                env.Dir('$SRC_DIR/build/../third_party/WebKit/WebCore/inspector'),
                env.Dir('$SRC_DIR/build/../third_party/WebKit/WebCore/loader'),
                env.Dir('$SRC_DIR/build/../third_party/WebKit/WebCore/loader/appcache'),
                env.Dir('$SRC_DIR/build/../third_party/WebKit/WebCore/loader/archive'),
                env.Dir('$SRC_DIR/build/../third_party/WebKit/WebCore/loader/icon'),
                env.Dir('$SRC_DIR/build/../third_party/WebKit/WebCore/notifications'),
                env.Dir('$SRC_DIR/build/../third_party/WebKit/WebCore/page'),
                env.Dir('$SRC_DIR/build/../third_party/WebKit/WebCore/page/animation'),
                env.Dir('$SRC_DIR/build/../third_party/WebKit/WebCore/page/chromium'),
                env.Dir('$SRC_DIR/build/../third_party/WebKit/WebCore/platform'),
                env.Dir('$SRC_DIR/build/../third_party/WebKit/WebCore/platform/animation'),
                env.Dir('$SRC_DIR/build/../third_party/WebKit/WebCore/platform/chromium'),
                env.Dir('$SRC_DIR/build/../third_party/WebKit/WebCore/platform/graphics'),
                env.Dir('$SRC_DIR/build/../third_party/WebKit/WebCore/platform/graphics/chromium'),
                env.Dir('$SRC_DIR/build/../third_party/WebKit/WebCore/platform/graphics/filters'),
                env.Dir('$SRC_DIR/build/../third_party/WebKit/WebCore/platform/graphics/opentype'),
                env.Dir('$SRC_DIR/build/../third_party/WebKit/WebCore/platform/graphics/skia'),
                env.Dir('$SRC_DIR/build/../third_party/WebKit/WebCore/platform/graphics/transforms'),
                env.Dir('$SRC_DIR/build/../third_party/WebKit/WebCore/platform/image-decoders'),
                env.Dir('$SRC_DIR/build/../third_party/WebKit/WebCore/platform/image-decoders/bmp'),
                env.Dir('$SRC_DIR/build/../third_party/WebKit/WebCore/platform/image-decoders/gif'),
                env.Dir('$SRC_DIR/build/../third_party/WebKit/WebCore/platform/image-decoders/ico'),
                env.Dir('$SRC_DIR/build/../third_party/WebKit/WebCore/platform/image-decoders/jpeg'),
                env.Dir('$SRC_DIR/build/../third_party/WebKit/WebCore/platform/image-decoders/png'),
                env.Dir('$SRC_DIR/build/../third_party/WebKit/WebCore/platform/image-decoders/skia'),
                env.Dir('$SRC_DIR/build/../third_party/WebKit/WebCore/platform/image-decoders/xbm'),
                env.Dir('$SRC_DIR/build/../third_party/WebKit/WebCore/platform/image-encoders/skia'),
                env.Dir('$SRC_DIR/build/../third_party/WebKit/WebCore/platform/mock'),
                env.Dir('$SRC_DIR/build/../third_party/WebKit/WebCore/platform/network'),
                env.Dir('$SRC_DIR/build/../third_party/WebKit/WebCore/platform/network/chromium'),
                env.Dir('$SRC_DIR/build/../third_party/WebKit/WebCore/platform/sql'),
                env.Dir('$SRC_DIR/build/../third_party/WebKit/WebCore/platform/text'),
                env.Dir('$SRC_DIR/build/../third_party/WebKit/WebCore/plugins'),
                env.Dir('$SRC_DIR/build/../third_party/WebKit/WebCore/plugins/chromium'),
                env.Dir('$SRC_DIR/build/../third_party/WebKit/WebCore/rendering'),
                env.Dir('$SRC_DIR/build/../third_party/WebKit/WebCore/rendering/style'),
                env.Dir('$SRC_DIR/build/../third_party/WebKit/WebCore/storage'),
                env.Dir('$SRC_DIR/build/../third_party/WebKit/WebCore/storage/chromium'),
                env.Dir('$SRC_DIR/build/../third_party/WebKit/WebCore/svg'),
                env.Dir('$SRC_DIR/build/../third_party/WebKit/WebCore/svg/animation'),
                env.Dir('$SRC_DIR/build/../third_party/WebKit/WebCore/svg/graphics'),
                env.Dir('$SRC_DIR/build/../third_party/WebKit/WebCore/svg/graphics/filters'),
                env.Dir('$SRC_DIR/build/../third_party/WebKit/WebCore/websockets'),
                env.Dir('$SRC_DIR/build/../third_party/WebKit/WebCore/workers'),
                env.Dir('$SRC_DIR/build/../third_party/WebKit/WebCore/xml'),
                env.Dir('${SHARED_INTERMEDIATE_DIR}/webkit'),
                env.Dir('${SHARED_INTERMEDIATE_DIR}/webkit/bindings'),
                env.Dir('$SRC_DIR/build/../third_party/WebKit/JavaScriptCore'),
                env.Dir('$SRC_DIR/build/../third_party/WebKit/JavaScriptCore/wtf'),
                env.Dir('${SHARED_INTERMEDIATE_DIR}/test_shell'),
                env.Dir('$SRC_DIR/build/../v8/include')
            ],
            CXXFLAGS = [
                '-fno-rtti',
                '-fno-threadsafe-statics',
                '-fvisibility-inlines-hidden'
            ],
            LINKFLAGS = [
                '-pthread',
                '-L$TOP_BUILDDIR',
                '-rdynamic'
            ],
            LIBS = [
                '-lX11',
                'libapp_base',
                'libbase_i18n',
                'libtest_support_base',
                'libtest_support_perf',
                'libbase',
                'liblinux_versioninfo',
                'libsymbolize',
                'libxdg_mime',
                'libdebugger',
                'libplugin',
                'libutility',
                'libprofile_import',
                'libchrome_gpu',
                'libworker',
                'libsyncapi',
                'libnotifier',
                'libsync',
                'libbrowser',
                'libcommon',
                'librenderer',
                'libtest_support_common',
                'libtest_support_ui',
                'libtest_support_unit',
                'libcommon_constants',
                'libnacl',
                'libconvert_dict',
                'libipc',
                'libmedia',
                'libomx_wrapper',
                'libnet_base',
                'libnet',
                'libnet_test_support',
                'libprinting',
                'libsdch',
                'libskia',
                'libskia_opts',
                'libgmock',
                'libgmockmain',
                'libgtest',
                'libgtestmain',
                'libcld',
                'libffmpeg',
                'libffmpegsumo',
                'libicudata',
                'libicui18n',
                'libicuuc',
                'libxml2',
                'libxslt',
                'liblzma_sdk',
                'libmodp_b64',
                'libots',
                'libsqlite3',
                'libwebkit',
                'libzlib',
                'libpepper_test_plugin',
                'libtest_shell_common',
                'libappcache',
                'libdatabase',
                'libglue',
                'libgoogleurl',
                'libv8_snapshot',
                'libv8_nosnapshot',
                'libv8_base',
                'libgenperf_libs',
                'libbreakpad_client',
                'libcourgette_lib',
                'libsandbox',
                'libssl',
                'libevent'
            ],
        ),
        'FilterOut' : dict(
        ),
        'Replace' : dict(
             FLOCK_LDMODULE = ['flock', '$TOP_BUILDDIR/linker.lock', '$LDMODULE'],
             FLOCK_LINK = ['flock', '$TOP_BUILDDIR/linker.lock', '$LINK'],
             FLOCK_SHLINK = ['flock', '$TOP_BUILDDIR/linker.lock', '$SHLINK'],
             IMPLICIT_COMMAND_DEPENDENCIES = '0',
             LDMODULECOM = [['$FLOCK_LDMODULE',
  '-o',
  '$TARGET',
  '$_LIBDIRFLAGS',
  '$LDMODULEFLAGS',
  '$SOURCES',
  '-Wl,--start-group',
  '$_LIBFLAGS',
  '-Wl,--end-group']],
             LIBPATH = ['$LIB_DIR'],
             LINKCOM = [['$FLOCK_LINK',
  '-o',
  '$TARGET',
  '$_LIBDIRFLAGS',
  '$LINKFLAGS',
  '$SOURCES',
  '-Wl,--start-group',
  '$_LIBFLAGS',
  '-Wl,--end-group']],
             SHLINKCOM = [['$FLOCK_SHLINK',
  '-o',
  '$TARGET',
  '$_LIBDIRFLAGS',
  '$SHLINKFLAGS',
  '$SOURCES',
  '-Wl,--start-group',
  '$_LIBFLAGS',
  '-Wl,--end-group']],
        ),
        'ImportExternal' : [
             'AS',
             'CC',
             'CXX',
             'LINK',
        ],
        'PropagateExternal' : [
             'AS',
             'CC',
             'CCACHE_DIR',
             'CXX',
             'DISTCC_DIR',
             'DISTCC_HOSTS',
             'HOME',
             'INCLUDE_SERVER_ARGS',
             'INCLUDE_SERVER_PORT',
             'LINK',
             'CHROME_BUILD_TYPE',
             'CHROMIUM_BUILD',
             'OFFICIAL_BUILD',
        ],
    },
}

config = configurations[env['CONFIG_NAME']]
env.Append(**config['Append'])
env.FilterOut(**config['FilterOut'])
env.Replace(**config['Replace'])

# Scons forces -fPIC for SHCCFLAGS on some platforms.
# Disable that so we can control it from cflags in gyp.
# Note that Scons itself is inconsistent with its -fPIC
# setting. SHCCFLAGS forces -fPIC, and SHCFLAGS does not.
# This will make SHCCFLAGS consistent with SHCFLAGS.
env['SHCCFLAGS'] = ['$CCFLAGS']

for _var in config['ImportExternal']:
  if _var in ARGUMENTS:
    env[_var] = ARGUMENTS[_var]
  elif _var in os.environ:
    env[_var] = os.environ[_var]
for _var in config['PropagateExternal']:
  if _var in ARGUMENTS:
    env[_var] = ARGUMENTS[_var]
  elif _var in os.environ:
    env['ENV'][_var] = os.environ[_var]

env['ENV']['LD_LIBRARY_PATH'] = env.subst('$LIB_DIR')

if ARGUMENTS.get('COVERAGE') not in (None, '0'):
  env.AppendUnique(
            CCFLAGS = [
                '-fprofile-arcs',
                '-ftest-coverage'
            ],
            LINKFLAGS = [
                '-fprofile-arcs'
            ],
  )

if ARGUMENTS.get('PROFILE') not in (None, '0'):
  env.AppendUnique(
            CCFLAGS = [
                '-pg',
                '-g'
            ],
            LINKFLAGS = [
                '-pg'
            ],
  )

if ARGUMENTS.get('SYMBOLS') not in (None, '0'):
  env.AppendUnique(
            CCFLAGS = [
                '-g'
            ],
  )

input_files = []

target_files = []
prerequisites = []

target_files.extend(input_files)

gyp_target = env.Alias('All', target_files)
dependencies = [
    Alias('app_unittests'),
    Alias('app_strings'),
    Alias('app_resources'),
    Alias('app_base'),
    Alias('base_i18n'),
    Alias('base_unittests'),
    Alias('test_support_base'),
    Alias('test_support_perf'),
    Alias('base'),
    Alias('linux_versioninfo'),
    Alias('symbolize'),
    Alias('xdg_mime'),
    Alias('chrome_resources'),
    Alias('chrome_strings'),
    Alias('theme_resources'),
    Alias('platform_locale_settings'),
    Alias('default_extensions'),
    Alias('debugger'),
    Alias('plugin'),
    Alias('utility'),
    Alias('profile_import'),
    Alias('chrome_gpu'),
    Alias('worker'),
    Alias('syncapi'),
    Alias('sync_proto'),
    Alias('notifier'),
    Alias('sync'),
    Alias('browser'),
    Alias('common'),
    Alias('chrome'),
    Alias('renderer'),
    Alias('test_support_common'),
    Alias('test_support_ui'),
    Alias('test_support_unit'),
    Alias('automated_ui_tests'),
    Alias('ui_tests'),
    Alias('nacl_ui_tests'),
    Alias('unit_tests'),
    Alias('browser_tests'),
    Alias('startup_tests'),
    Alias('reliability_tests'),
    Alias('page_cycler_tests'),
    Alias('tab_switching_test'),
    Alias('memory_test'),
    Alias('url_fetch_test'),
    Alias('sync_unit_tests'),
    Alias('sync_integration_tests'),
    Alias('common_constants'),
    Alias('nacl'),
    Alias('convert_dict'),
    Alias('convert_dict_lib'),
    Alias('flush_cache'),
    Alias('linux_symbols'),
    Alias('packed_resources'),
    Alias('perf_tests'),
    Alias('interactive_ui_tests'),
    Alias('ipc_tests'),
    Alias('ipc'),
    Alias('media'),
    Alias('media_unittests'),
    Alias('media_bench'),
    Alias('wav_ola_test'),
    Alias('qt_faststart'),
    Alias('omx_test'),
    Alias('omx_unittests'),
    Alias('omx_wrapper'),
    Alias('player_x11'),
    Alias('net_base'),
    Alias('net'),
    Alias('net_unittests'),
    Alias('net_perftests'),
    Alias('stress_cache'),
    Alias('tld_cleanup'),
    Alias('crash_cache'),
    Alias('net_test_support'),
    Alias('net_resources'),
    Alias('fetch_client'),
    Alias('fetch_server'),
    Alias('hresolv'),
    Alias('printing'),
    Alias('printing_unittests'),
    Alias('sdch'),
    Alias('skia'),
    Alias('skia_opts'),
    Alias('gmock'),
    Alias('gmockmain'),
    Alias('gtest'),
    Alias('gtestmain'),
    Alias('bzip2'),
    Alias('cld'),
    Alias('codesighs'),
    Alias('maptsvdifftool'),
    Alias('nm2tsv'),
    Alias('ffmpeg'),
    Alias('ffmpeg_binaries'),
    Alias('ffmpegsumo'),
    Alias('assemble_ffmpeg_asm'),
    Alias('make_ffmpeg_asm_lib'),
    Alias('ffmpegsumo_nolink'),
    Alias('icudata'),
    Alias('icui18n'),
    Alias('icuuc'),
    Alias('libjpeg'),
    Alias('libpng'),
    Alias('libxml'),
    Alias('libxslt'),
    Alias('lzma_sdk'),
    Alias('modp_b64'),
    Alias('npapi'),
    Alias('ots'),
    Alias('sqlite'),
    Alias('sqlite_shell'),
    Alias('webkit'),
    Alias('webkit_unit_tests'),
    Alias('zlib'),
    Alias('pepper_test_plugin'),
    Alias('test_shell_common'),
    Alias('test_shell_pak'),
    Alias('test_shell'),
    Alias('test_shell_tests'),
    Alias('npapi_layout_test_plugin'),
    Alias('test_shell_resources'),
    Alias('pull_in_test_shell'),
    Alias('pull_in_webkit_unit_tests'),
    Alias('webkit_resources'),
    Alias('webkit_strings'),
    Alias('appcache'),
    Alias('database'),
    Alias('glue'),
    Alias('inspector_resources'),
    Alias('devtools_html'),
    Alias('concatenated_devtools_js'),
    Alias('lastchange'),
    Alias('googleurl'),
    Alias('googleurl_unittests'),
    Alias('v8'),
    Alias('v8_snapshot'),
    Alias('v8_nosnapshot'),
    Alias('v8_base'),
    Alias('js2c'),
    Alias('mksnapshot'),
    Alias('v8_shell'),
    Alias('yasm'),
    Alias('config_sources'),
    Alias('generate_files'),
    Alias('genperf_libs'),
    Alias('genstring'),
    Alias('genperf'),
    Alias('genmacro'),
    Alias('genversion'),
    Alias('re2c'),
    Alias('genmodule'),
    Alias('breakpad_client'),
    Alias('breakpad_unittests'),
    Alias('generate_test_dump'),
    Alias('courgette_lib'),
    Alias('courgette'),
    Alias('courgette_minimal_tool'),
    Alias('courgette_unittests'),
    Alias('courgette_fuzz'),
    Alias('chrome_sandbox'),
    Alias('sandbox'),
    Alias('gtk_clipboard_dump'),
    Alias('xdisplaycheck'),
    Alias('ssl'),
    Alias('libevent')
]
env.Requires(target_files, dependencies)
env.Requires(gyp_target, dependencies)
for prerequisite in prerequisites:
  env.Requires(prerequisite, dependencies)
env.Requires(gyp_target, prerequisites)
Return("gyp_target")

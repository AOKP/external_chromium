# This file is generated; do not edit.

import os

Import("env")

env = env.Clone(COMPONENT_NAME='icu',
                TARGET_NAME='icuuc')

configurations = {
    'Debug' : {
        'Append' : dict(
            CCFLAGS = [
                '-pthread',
                '-fno-exceptions',
                '-fno-asynchronous-unwind-tables',
                '-fvisibility=hidden',
                '-D_FILE_OFFSET_BITS=64',
                '-fno-strict-aliasing',
                '-Wno-deprecated-declarations',
                '-Wno-unused-function',
                '-O0',
                '-g'
            ],
            CPPDEFINES = [
                'U_STATIC_IMPLEMENTATION',
                'CHROMIUM_BUILD',
                'U_COMMON_IMPLEMENTATION',
                '_DEBUG'
            ],
            CPPPATH = [
                env.Dir('$SRC_DIR/third_party/icu/public/common'),
                env.Dir('$SRC_DIR/third_party/icu/public/i18n'),
                env.Dir('$SRC_DIR/third_party/icu/source/common'),
                env.Dir('$SRC_DIR/third_party/icu/source/i18n')
            ],
            CXXFLAGS = [
                '-fno-rtti',
                '-fno-threadsafe-statics',
                '-fvisibility-inlines-hidden'
            ],
            LINKFLAGS = [
                '-pthread',
                '-rdynamic'
            ],
        ),
        'FilterOut' : dict(
        ),
        'Replace' : dict(
             FLOCK_LDMODULE = ['flock', '$TOP_BUILDDIR/linker.lock', '$LDMODULE'],
             FLOCK_LINK = ['flock', '$TOP_BUILDDIR/linker.lock', '$LINK'],
             FLOCK_SHLINK = ['flock', '$TOP_BUILDDIR/linker.lock', '$SHLINK'],
             IMPLICIT_COMMAND_DEPENDENCIES = '0',
             LDMODULECOM = [['$FLOCK_LDMODULE',
  '-o',
  '$TARGET',
  '$_LIBDIRFLAGS',
  '$LDMODULEFLAGS',
  '$SOURCES',
  '-Wl,--start-group',
  '$_LIBFLAGS',
  '-Wl,--end-group']],
             LIBPATH = ['$LIB_DIR'],
             LINKCOM = [['$FLOCK_LINK',
  '-o',
  '$TARGET',
  '$_LIBDIRFLAGS',
  '$LINKFLAGS',
  '$SOURCES',
  '-Wl,--start-group',
  '$_LIBFLAGS',
  '-Wl,--end-group']],
             SHLINKCOM = [['$FLOCK_SHLINK',
  '-o',
  '$TARGET',
  '$_LIBDIRFLAGS',
  '$SHLINKFLAGS',
  '$SOURCES',
  '-Wl,--start-group',
  '$_LIBFLAGS',
  '-Wl,--end-group']],
        ),
        'ImportExternal' : [
             'AS',
             'CC',
             'CXX',
             'LINK',
        ],
        'PropagateExternal' : [
             'AS',
             'CC',
             'CCACHE_DIR',
             'CXX',
             'DISTCC_DIR',
             'DISTCC_HOSTS',
             'HOME',
             'INCLUDE_SERVER_ARGS',
             'INCLUDE_SERVER_PORT',
             'LINK',
             'CHROME_BUILD_TYPE',
             'CHROMIUM_BUILD',
             'OFFICIAL_BUILD',
        ],
    },
    'Release' : {
        'Append' : dict(
            CCFLAGS = [
                '-pthread',
                '-fno-exceptions',
                '-fno-asynchronous-unwind-tables',
                '-fvisibility=hidden',
                '-D_FILE_OFFSET_BITS=64',
                '-fno-strict-aliasing',
                '-Wno-deprecated-declarations',
                '-Wno-unused-function',
                '-O2',
                '-fno-ident',
                '-fdata-sections',
                '-ffunction-sections'
            ],
            CPPDEFINES = [
                'U_STATIC_IMPLEMENTATION',
                'CHROMIUM_BUILD',
                'U_COMMON_IMPLEMENTATION',
                'NDEBUG',
                'NVALGRIND'
            ],
            CPPPATH = [
                env.Dir('$SRC_DIR/third_party/icu/public/common'),
                env.Dir('$SRC_DIR/third_party/icu/public/i18n'),
                env.Dir('$SRC_DIR/third_party/icu/source/common'),
                env.Dir('$SRC_DIR/third_party/icu/source/i18n')
            ],
            CXXFLAGS = [
                '-fno-rtti',
                '-fno-threadsafe-statics',
                '-fvisibility-inlines-hidden'
            ],
            LINKFLAGS = [
                '-pthread',
                '-Wl,--gc-sections'
            ],
        ),
        'FilterOut' : dict(
        ),
        'Replace' : dict(
             FLOCK_LDMODULE = ['flock', '$TOP_BUILDDIR/linker.lock', '$LDMODULE'],
             FLOCK_LINK = ['flock', '$TOP_BUILDDIR/linker.lock', '$LINK'],
             FLOCK_SHLINK = ['flock', '$TOP_BUILDDIR/linker.lock', '$SHLINK'],
             IMPLICIT_COMMAND_DEPENDENCIES = '0',
             LDMODULECOM = [['$FLOCK_LDMODULE',
  '-o',
  '$TARGET',
  '$_LIBDIRFLAGS',
  '$LDMODULEFLAGS',
  '$SOURCES',
  '-Wl,--start-group',
  '$_LIBFLAGS',
  '-Wl,--end-group']],
             LIBPATH = ['$LIB_DIR'],
             LINKCOM = [['$FLOCK_LINK',
  '-o',
  '$TARGET',
  '$_LIBDIRFLAGS',
  '$LINKFLAGS',
  '$SOURCES',
  '-Wl,--start-group',
  '$_LIBFLAGS',
  '-Wl,--end-group']],
             SHLINKCOM = [['$FLOCK_SHLINK',
  '-o',
  '$TARGET',
  '$_LIBDIRFLAGS',
  '$SHLINKFLAGS',
  '$SOURCES',
  '-Wl,--start-group',
  '$_LIBFLAGS',
  '-Wl,--end-group']],
        ),
        'ImportExternal' : [
             'AS',
             'CC',
             'CXX',
             'LINK',
        ],
        'PropagateExternal' : [
             'AS',
             'CC',
             'CCACHE_DIR',
             'CXX',
             'DISTCC_DIR',
             'DISTCC_HOSTS',
             'HOME',
             'INCLUDE_SERVER_ARGS',
             'INCLUDE_SERVER_PORT',
             'LINK',
             'CHROME_BUILD_TYPE',
             'CHROMIUM_BUILD',
             'OFFICIAL_BUILD',
        ],
    },
}

config = configurations[env['CONFIG_NAME']]
env.Append(**config['Append'])
env.FilterOut(**config['FilterOut'])
env.Replace(**config['Replace'])

# Scons forces -fPIC for SHCCFLAGS on some platforms.
# Disable that so we can control it from cflags in gyp.
# Note that Scons itself is inconsistent with its -fPIC
# setting. SHCCFLAGS forces -fPIC, and SHCFLAGS does not.
# This will make SHCCFLAGS consistent with SHCFLAGS.
env['SHCCFLAGS'] = ['$CCFLAGS']

for _var in config['ImportExternal']:
  if _var in ARGUMENTS:
    env[_var] = ARGUMENTS[_var]
  elif _var in os.environ:
    env[_var] = os.environ[_var]
for _var in config['PropagateExternal']:
  if _var in ARGUMENTS:
    env[_var] = ARGUMENTS[_var]
  elif _var in os.environ:
    env['ENV'][_var] = os.environ[_var]

env['ENV']['LD_LIBRARY_PATH'] = env.subst('$LIB_DIR')

if ARGUMENTS.get('COVERAGE') not in (None, '0'):
  env.AppendUnique(
            CCFLAGS = [
                '-fprofile-arcs',
                '-ftest-coverage'
            ],
            LINKFLAGS = [
                '-fprofile-arcs'
            ],
  )

if ARGUMENTS.get('PROFILE') not in (None, '0'):
  env.AppendUnique(
            CCFLAGS = [
                '-pg',
                '-g'
            ],
            LINKFLAGS = [
                '-pg'
            ],
  )

if ARGUMENTS.get('SYMBOLS') not in (None, '0'):
  env.AppendUnique(
            CCFLAGS = [
                '-g'
            ],
  )

input_files = [
    'source/common/bmpset.cpp',
    'source/common/brkeng.cpp',
    'source/common/brkiter.cpp',
    'source/common/bytestream.cpp',
    'source/common/caniter.cpp',
    'source/common/chariter.cpp',
    'source/common/cmemory.c',
    'source/common/cstring.c',
    'source/common/cwchar.c',
    'source/common/dictbe.cpp',
    'source/common/dtintrv.cpp',
    'source/common/errorcode.cpp',
    'source/common/locbased.cpp',
    'source/common/locid.cpp',
    'source/common/locmap.c',
    'source/common/locutil.cpp',
    'source/common/mutex.cpp',
    'source/common/normlzr.cpp',
    'source/common/parsepos.cpp',
    'source/common/propname.cpp',
    'source/common/propsvec.c',
    'source/common/punycode.c',
    'source/common/putil.c',
    'source/common/rbbi.cpp',
    'source/common/rbbidata.cpp',
    'source/common/rbbinode.cpp',
    'source/common/rbbirb.cpp',
    'source/common/rbbiscan.cpp',
    'source/common/rbbisetb.cpp',
    'source/common/rbbistbl.cpp',
    'source/common/rbbitblb.cpp',
    'source/common/resbund.cpp',
    'source/common/resbund_cnv.cpp',
    'source/common/ruleiter.cpp',
    'source/common/schriter.cpp',
    'source/common/serv.cpp',
    'source/common/servlk.cpp',
    'source/common/servlkf.cpp',
    'source/common/servls.cpp',
    'source/common/servnotf.cpp',
    'source/common/servrbf.cpp',
    'source/common/servslkf.cpp',
    'source/common/stringpiece.cpp',
    'source/common/triedict.cpp',
    'source/common/uarrsort.c',
    'source/common/ubidi.c',
    'source/common/ubidi_props.c',
    'source/common/ubidiln.c',
    'source/common/ubidiwrt.c',
    'source/common/ubrk.cpp',
    'source/common/ucase.c',
    'source/common/ucasemap.c',
    'source/common/ucat.c',
    'source/common/uchar.c',
    'source/common/uchriter.cpp',
    'source/common/ucln_cmn.c',
    'source/common/ucmndata.c',
    'source/common/ucnv.c',
    'source/common/ucnv2022.c',
    'source/common/ucnv_bld.c',
    'source/common/ucnv_cb.c',
    'source/common/ucnv_cnv.c',
    'source/common/ucnv_err.c',
    'source/common/ucnv_ext.c',
    'source/common/ucnv_io.c',
    'source/common/ucnv_lmb.c',
    'source/common/ucnv_set.c',
    'source/common/ucnv_u16.c',
    'source/common/ucnv_u32.c',
    'source/common/ucnv_u7.c',
    'source/common/ucnv_u8.c',
    'source/common/ucnvbocu.c',
    'source/common/ucnvdisp.c',
    'source/common/ucnvhz.c',
    'source/common/ucnvisci.c',
    'source/common/ucnvlat1.c',
    'source/common/ucnvmbcs.c',
    'source/common/ucnvscsu.c',
    'source/common/ucnvsel.cpp',
    'source/common/ucol_swp.c',
    'source/common/udata.c',
    'source/common/udatamem.c',
    'source/common/udataswp.c',
    'source/common/uenum.c',
    'source/common/uhash.c',
    'source/common/uhash_us.cpp',
    'source/common/uidna.cpp',
    'source/common/uinit.c',
    'source/common/uinvchar.c',
    'source/common/uiter.cpp',
    'source/common/ulist.c',
    'source/common/uloc.c',
    'source/common/uloc_tag.c',
    'source/common/umapfile.c',
    'source/common/umath.c',
    'source/common/umutex.c',
    'source/common/unames.c',
    'source/common/unifilt.cpp',
    'source/common/unifunct.cpp',
    'source/common/uniset.cpp',
    'source/common/uniset_props.cpp',
    'source/common/unisetspan.cpp',
    'source/common/unistr.cpp',
    'source/common/unistr_case.cpp',
    'source/common/unistr_cnv.cpp',
    'source/common/unistr_props.cpp',
    'source/common/unorm.cpp',
    'source/common/unorm_it.c',
    'source/common/unormcmp.cpp',
    'source/common/uobject.cpp',
    'source/common/uprops.c',
    'source/common/ures_cnv.c',
    'source/common/uresbund.c',
    'source/common/uresdata.c',
    'source/common/usc_impl.c',
    'source/common/uscript.c',
    'source/common/uset.cpp',
    'source/common/uset_props.cpp',
    'source/common/usetiter.cpp',
    'source/common/ushape.c',
    'source/common/usprep.cpp',
    'source/common/ustack.cpp',
    'source/common/ustr_cnv.c',
    'source/common/ustr_wcs.c',
    'source/common/ustrcase.c',
    'source/common/ustrenum.cpp',
    'source/common/ustrfmt.c',
    'source/common/ustring.c',
    'source/common/ustrtrns.c',
    'source/common/utext.cpp',
    'source/common/utf_impl.c',
    'source/common/util.cpp',
    'source/common/util_props.cpp',
    'source/common/utrace.c',
    'source/common/utrie2_builder.c',
    'source/common/utrie2.c',
    'source/common/utrie.c',
    'source/common/utypes.c',
    'source/common/uvector.cpp',
    'source/common/uvectr32.cpp',
    'source/common/wintz.c',
]

target_files = []
prerequisites = []

_result = []
for infile in input_files:
  if env.compilable(infile):
    if (type(infile) == type('')
        and (infile.startswith('$SRC_DIR/third_party/icu/')
             or not os.path.isabs(env.subst(infile)))):
      # Force files below the build directory by replacing all '..'
      # elements in the path with '__':
      base, ext = os.path.splitext(os.path.normpath(infile))
      base = [d == '..' and '__' or d for d in base.split('/')]
      base = os.path.join(*base)
      object = '${OBJ_DIR}/${COMPONENT_NAME}/${TARGET_NAME}/' + base
      if not infile.startswith('$SRC_DIR/third_party/icu/'):
        infile = '$SRC_DIR/third_party/icu/' + infile
      infile = env.StaticObject(object, infile)[0]
    else:
      infile = env.StaticObject(infile)[0]
  _result.append(infile)
input_files = _result

_outputs = env.GypStaticLibrary('icuuc', input_files)
target_files.extend(_outputs)

gyp_target = env.Alias('icuuc', target_files)
env.Requires(gyp_target, prerequisites)
Return("gyp_target")

import talk
Import("env")

talk.Library(env, name = "expat",
             srcs = [
               "third_party/expat/v2_0_1/Source/lib/xmlparse.c",
               "third_party/expat/v2_0_1/Source/lib/xmlrole.c",
               "third_party/expat/v2_0_1/Source/lib/xmltok.c",
               "third_party/expat/v2_0_1/Source/lib/xmltok_impl.c",
               "third_party/expat/v2_0_1/Source/lib/xmltok_ns.c",
             ],
             CPPDEFINES = [
               "HAVE_BCOPY",
             ],
)
talk.Library(env, name = "libjingle",
             lin_srcs = [
               "base/linux.cc",
             ],
             mac_srcs = [
               "base/macconversion.cc",
               "base/macutils.cc",
             ],
             posix_srcs = [
               "base/unixfilesystem.cc",
             ],
             CPPDEFINES = [
               "FEATURE_ENABLE_VOICEMAIL",
               "FEATURE_ENABLE_SSL",
               "SSL_USE_OPENSSL",
               "HAVE_OPENSSL_SSL_H=1",
             ],
             srcs = [
               "base/asynchttprequest.cc",
               "base/asyncpacketsocket.cc",
               "base/asynctcpsocket.cc",
               "base/asyncudpsocket.cc",
               "base/autodetectproxy.cc",
               "base/base64.cc",
               "base/bytebuffer.cc",
               "base/checks.cc",
               "base/common.cc",
               "base/diskcache.cc",
               "base/event.cc",
               "base/fileutils.cc",
               "base/firewallsocketserver.cc",
               "base/flags.cc",
               "base/helpers.cc",
               "base/host.cc",
               "base/httpbase.cc",
               "base/httpclient.cc",
               "base/httpcommon.cc",
               "base/httprequest.cc",
               "base/logging.cc",
               "base/md5c.c",
               "base/messagehandler.cc",
               "base/messagequeue.cc",
               "base/nethelpers.cc",
               "base/network.cc",
               "base/openssladapter.cc",
               "base/opensslidentity.cc",
               "base/opensslstreamadapter.cc",
               "base/pathutils.cc",
               "base/physicalsocketserver.cc",
               "base/proxydetect.cc",
               "base/proxyinfo.cc",
               "base/signalthread.cc",
               "base/socketadapters.cc",
               "base/socketaddress.cc",
               "base/socketpool.cc",
               "base/ssladapter.cc",
               "base/sslidentity.cc",
               "base/sslsocketfactory.cc",
               "base/sslstreamadapter.cc",
               "base/stream.cc",
               "base/stringdigest.cc",
               "base/stringencode.cc",
               "base/stringutils.cc",
               "base/task.cc",
               "base/taskparent.cc",
               "base/taskrunner.cc",
               "base/thread.cc",
               "base/time.cc",
               "base/urlencode.cc",
               "p2p/base/constants.cc",
               "p2p/base/p2ptransport.cc",
               "p2p/base/p2ptransportchannel.cc",
               "p2p/base/parsing.cc",
               "p2p/base/port.cc",
               "p2p/base/pseudotcp.cc",
               "p2p/base/relayport.cc",
               "p2p/base/rawtransport.cc",
               "p2p/base/rawtransportchannel.cc",
               "p2p/base/session.cc",
               "p2p/base/sessionmanager.cc",
               "p2p/base/sessionmessages.cc",
               "p2p/base/stun.cc",
               "p2p/base/stunport.cc",
               "p2p/base/stunrequest.cc",
               "p2p/base/tcpport.cc",
               "p2p/base/transport.cc",
               "p2p/base/transportchannel.cc",
               "p2p/base/transportchannelproxy.cc",
               "p2p/base/udpport.cc",
               "p2p/client/basicportallocator.cc",
               "p2p/client/httpportallocator.cc",
               "p2p/client/socketmonitor.cc",
               "session/tunnel/pseudotcpchannel.cc",
               "session/tunnel/tunnelsessionclient.cc",
               "session/tunnel/securetunnelsessionclient.cc",
               "session/phone/audiomonitor.cc",
               "session/phone/call.cc",
               "session/phone/channel.cc",
               "session/phone/channelmanager.cc",
               "session/phone/codec.cc",
               "session/phone/devicemanager.cc",
               "session/phone/mediaengine.cc",
               "session/phone/mediamonitor.cc",
               "session/phone/mediasessionclient.cc",
               "session/phone/soundclip.cc",
               "session/phone/srtpfilter.cc",
               "session/phone/v4llookup.cc",
               "xmllite/qname.cc",
               "xmllite/xmlbuilder.cc",
               "xmllite/xmlconstants.cc",
               "xmllite/xmlelement.cc",
               "xmllite/xmlnsstack.cc",
               "xmllite/xmlparser.cc",
               "xmllite/xmlprinter.cc",
               "xmpp/constants.cc",
               "xmpp/jid.cc",
               "xmpp/ratelimitmanager.cc",
               "xmpp/saslmechanism.cc",
               "xmpp/xmppclient.cc",
               "xmpp/xmppengineimpl.cc",
               "xmpp/xmppengineimpl_iq.cc",
               "xmpp/xmpplogintask.cc",
               "xmpp/xmppstanzaparser.cc",
               "xmpp/xmpptask.cc",
             ],
             win_srcs = [
               "base/schanneladapter.cc",
               "base/win32.cc",
               "base/win32filesystem.cc",
               "base/win32securityerrors.cc",
               "base/win32socketserver.cc",
               "base/win32socketinit.cc",
               "base/win32window.cc",
               "base/winfirewall.cc",
               "base/winping.cc",
             ],
)
talk.App(env, name = "login",
         libs = [
           "libjingle",
           "expat",
           "libxmpphelp",
         ],
         srcs = [
           "examples/login/xmppthread.cc",
           "examples/login/login_main.cc",
         ],
         lin_libs = [
           "libpthread",
           ":libssl.so.0.9.8",
         ],
)
talk.Library(env, name = "libxmpphelp",
             libs = [
               "libjingle",
             ],
             srcs = [
               "examples/login/xmppauth.cc",
               "examples/login/xmpppump.cc",
               "examples/login/xmppsocket.cc",
             ],
)
talk.App(env, name = "call",
         libs = [
           "libjingle",
           "expat",
           "libxmpphelp",
         ],
         srcs = [
           "examples/call/call_main.cc",
           "examples/call/callclient.cc",
           "examples/call/console.cc",
           "examples/call/discoitemsquerytask.cc",
           "examples/call/friendinvitesendtask.cc",
           "examples/call/mucinviterecvtask.cc",
           "examples/call/mucinvitesendtask.cc",
           "examples/call/presenceouttask.cc",
           "examples/call/presencepushtask.cc",
           "examples/call/voicemailjidrequester.cc",
         ],
         CPPDEFINES = [
           "FEATURE_ENABLE_VOICEMAIL",
         ],
         lin_libs = [
           "libasound",
           "libpthread",
           ":libssl.so.0.9.8",
         ],
)
